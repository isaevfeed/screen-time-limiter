// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package handlers

//go:generate minimock -i screen-time-limiter/internal/app/handlers.limitRepo -o limit_repo_mock_test.go -n LimitRepoMock -p handlers

import (
	"context"
	"screen-time-limiter/internal/domain/model"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LimitRepoMock implements limitRepo
type LimitRepoMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, limit model.Limit) (err error)
	funcCreateOrigin    string
	inspectFuncCreate   func(ctx context.Context, limit model.Limit)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mLimitRepoMockCreate

	funcGetByLimitID          func(ctx context.Context, limitID int32) (lp1 *model.Limit, err error)
	funcGetByLimitIDOrigin    string
	inspectFuncGetByLimitID   func(ctx context.Context, limitID int32)
	afterGetByLimitIDCounter  uint64
	beforeGetByLimitIDCounter uint64
	GetByLimitIDMock          mLimitRepoMockGetByLimitID
}

// NewLimitRepoMock returns a mock for limitRepo
func NewLimitRepoMock(t minimock.Tester) *LimitRepoMock {
	m := &LimitRepoMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mLimitRepoMockCreate{mock: m}
	m.CreateMock.callArgs = []*LimitRepoMockCreateParams{}

	m.GetByLimitIDMock = mLimitRepoMockGetByLimitID{mock: m}
	m.GetByLimitIDMock.callArgs = []*LimitRepoMockGetByLimitIDParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLimitRepoMockCreate struct {
	optional           bool
	mock               *LimitRepoMock
	defaultExpectation *LimitRepoMockCreateExpectation
	expectations       []*LimitRepoMockCreateExpectation

	callArgs []*LimitRepoMockCreateParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LimitRepoMockCreateExpectation specifies expectation struct of the limitRepo.Create
type LimitRepoMockCreateExpectation struct {
	mock               *LimitRepoMock
	params             *LimitRepoMockCreateParams
	paramPtrs          *LimitRepoMockCreateParamPtrs
	expectationOrigins LimitRepoMockCreateExpectationOrigins
	results            *LimitRepoMockCreateResults
	returnOrigin       string
	Counter            uint64
}

// LimitRepoMockCreateParams contains parameters of the limitRepo.Create
type LimitRepoMockCreateParams struct {
	ctx   context.Context
	limit model.Limit
}

// LimitRepoMockCreateParamPtrs contains pointers to parameters of the limitRepo.Create
type LimitRepoMockCreateParamPtrs struct {
	ctx   *context.Context
	limit *model.Limit
}

// LimitRepoMockCreateResults contains results of the limitRepo.Create
type LimitRepoMockCreateResults struct {
	err error
}

// LimitRepoMockCreateOrigins contains origins of expectations of the limitRepo.Create
type LimitRepoMockCreateExpectationOrigins struct {
	origin      string
	originCtx   string
	originLimit string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreate *mLimitRepoMockCreate) Optional() *mLimitRepoMockCreate {
	mmCreate.optional = true
	return mmCreate
}

// Expect sets up expected params for limitRepo.Create
func (mmCreate *mLimitRepoMockCreate) Expect(ctx context.Context, limit model.Limit) *mLimitRepoMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &LimitRepoMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.paramPtrs != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by ExpectParams functions")
	}

	mmCreate.defaultExpectation.params = &LimitRepoMockCreateParams{ctx, limit}
	mmCreate.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// ExpectCtxParam1 sets up expected param ctx for limitRepo.Create
func (mmCreate *mLimitRepoMockCreate) ExpectCtxParam1(ctx context.Context) *mLimitRepoMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &LimitRepoMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &LimitRepoMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.ctx = &ctx
	mmCreate.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmCreate
}

// ExpectLimitParam2 sets up expected param limit for limitRepo.Create
func (mmCreate *mLimitRepoMockCreate) ExpectLimitParam2(limit model.Limit) *mLimitRepoMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &LimitRepoMockCreateExpectation{}
	}

	if mmCreate.defaultExpectation.params != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Expect")
	}

	if mmCreate.defaultExpectation.paramPtrs == nil {
		mmCreate.defaultExpectation.paramPtrs = &LimitRepoMockCreateParamPtrs{}
	}
	mmCreate.defaultExpectation.paramPtrs.limit = &limit
	mmCreate.defaultExpectation.expectationOrigins.originLimit = minimock.CallerInfo(1)

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the limitRepo.Create
func (mmCreate *mLimitRepoMockCreate) Inspect(f func(ctx context.Context, limit model.Limit)) *mLimitRepoMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for LimitRepoMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by limitRepo.Create
func (mmCreate *mLimitRepoMockCreate) Return(err error) *LimitRepoMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &LimitRepoMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &LimitRepoMockCreateResults{err}
	mmCreate.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// Set uses given function f to mock the limitRepo.Create method
func (mmCreate *mLimitRepoMockCreate) Set(f func(ctx context.Context, limit model.Limit) (err error)) *LimitRepoMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the limitRepo.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the limitRepo.Create method")
	}

	mmCreate.mock.funcCreate = f
	mmCreate.mock.funcCreateOrigin = minimock.CallerInfo(1)
	return mmCreate.mock
}

// When sets expectation for the limitRepo.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mLimitRepoMockCreate) When(ctx context.Context, limit model.Limit) *LimitRepoMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("LimitRepoMock.Create mock is already set by Set")
	}

	expectation := &LimitRepoMockCreateExpectation{
		mock:               mmCreate.mock,
		params:             &LimitRepoMockCreateParams{ctx, limit},
		expectationOrigins: LimitRepoMockCreateExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up limitRepo.Create return parameters for the expectation previously defined by the When method
func (e *LimitRepoMockCreateExpectation) Then(err error) *LimitRepoMock {
	e.results = &LimitRepoMockCreateResults{err}
	return e.mock
}

// Times sets number of times limitRepo.Create should be invoked
func (mmCreate *mLimitRepoMockCreate) Times(n uint64) *mLimitRepoMockCreate {
	if n == 0 {
		mmCreate.mock.t.Fatalf("Times of LimitRepoMock.Create mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreate.expectedInvocations, n)
	mmCreate.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreate
}

func (mmCreate *mLimitRepoMockCreate) invocationsDone() bool {
	if len(mmCreate.expectations) == 0 && mmCreate.defaultExpectation == nil && mmCreate.mock.funcCreate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreate.mock.afterCreateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Create implements limitRepo
func (mmCreate *LimitRepoMock) Create(ctx context.Context, limit model.Limit) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	mmCreate.t.Helper()

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, limit)
	}

	mm_params := LimitRepoMockCreateParams{ctx, limit}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_want_ptrs := mmCreate.CreateMock.defaultExpectation.paramPtrs

		mm_got := LimitRepoMockCreateParams{ctx, limit}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreate.t.Errorf("LimitRepoMock.Create got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.limit != nil && !minimock.Equal(*mm_want_ptrs.limit, mm_got.limit) {
				mmCreate.t.Errorf("LimitRepoMock.Create got unexpected parameter limit, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreate.CreateMock.defaultExpectation.expectationOrigins.originLimit, *mm_want_ptrs.limit, mm_got.limit, minimock.Diff(*mm_want_ptrs.limit, mm_got.limit))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("LimitRepoMock.Create got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreate.CreateMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the LimitRepoMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, limit)
	}
	mmCreate.t.Fatalf("Unexpected call to LimitRepoMock.Create. %v %v", ctx, limit)
	return
}

// CreateAfterCounter returns a count of finished LimitRepoMock.Create invocations
func (mmCreate *LimitRepoMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of LimitRepoMock.Create invocations
func (mmCreate *LimitRepoMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to LimitRepoMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mLimitRepoMockCreate) Calls() []*LimitRepoMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*LimitRepoMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *LimitRepoMock) MinimockCreateDone() bool {
	if m.CreateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateMock.invocationsDone()
}

// MinimockCreateInspect logs each unmet expectation
func (m *LimitRepoMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LimitRepoMock.Create at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateCounter := mm_atomic.LoadUint64(&m.afterCreateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && afterCreateCounter < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LimitRepoMock.Create at\n%s", m.CreateMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LimitRepoMock.Create at\n%s with params: %#v", m.CreateMock.defaultExpectation.expectationOrigins.origin, *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && afterCreateCounter < 1 {
		m.t.Errorf("Expected call to LimitRepoMock.Create at\n%s", m.funcCreateOrigin)
	}

	if !m.CreateMock.invocationsDone() && afterCreateCounter > 0 {
		m.t.Errorf("Expected %d calls to LimitRepoMock.Create at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateMock.expectedInvocations), m.CreateMock.expectedInvocationsOrigin, afterCreateCounter)
	}
}

type mLimitRepoMockGetByLimitID struct {
	optional           bool
	mock               *LimitRepoMock
	defaultExpectation *LimitRepoMockGetByLimitIDExpectation
	expectations       []*LimitRepoMockGetByLimitIDExpectation

	callArgs []*LimitRepoMockGetByLimitIDParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LimitRepoMockGetByLimitIDExpectation specifies expectation struct of the limitRepo.GetByLimitID
type LimitRepoMockGetByLimitIDExpectation struct {
	mock               *LimitRepoMock
	params             *LimitRepoMockGetByLimitIDParams
	paramPtrs          *LimitRepoMockGetByLimitIDParamPtrs
	expectationOrigins LimitRepoMockGetByLimitIDExpectationOrigins
	results            *LimitRepoMockGetByLimitIDResults
	returnOrigin       string
	Counter            uint64
}

// LimitRepoMockGetByLimitIDParams contains parameters of the limitRepo.GetByLimitID
type LimitRepoMockGetByLimitIDParams struct {
	ctx     context.Context
	limitID int32
}

// LimitRepoMockGetByLimitIDParamPtrs contains pointers to parameters of the limitRepo.GetByLimitID
type LimitRepoMockGetByLimitIDParamPtrs struct {
	ctx     *context.Context
	limitID *int32
}

// LimitRepoMockGetByLimitIDResults contains results of the limitRepo.GetByLimitID
type LimitRepoMockGetByLimitIDResults struct {
	lp1 *model.Limit
	err error
}

// LimitRepoMockGetByLimitIDOrigins contains origins of expectations of the limitRepo.GetByLimitID
type LimitRepoMockGetByLimitIDExpectationOrigins struct {
	origin        string
	originCtx     string
	originLimitID string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Optional() *mLimitRepoMockGetByLimitID {
	mmGetByLimitID.optional = true
	return mmGetByLimitID
}

// Expect sets up expected params for limitRepo.GetByLimitID
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Expect(ctx context.Context, limitID int32) *mLimitRepoMockGetByLimitID {
	if mmGetByLimitID.mock.funcGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Set")
	}

	if mmGetByLimitID.defaultExpectation == nil {
		mmGetByLimitID.defaultExpectation = &LimitRepoMockGetByLimitIDExpectation{}
	}

	if mmGetByLimitID.defaultExpectation.paramPtrs != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by ExpectParams functions")
	}

	mmGetByLimitID.defaultExpectation.params = &LimitRepoMockGetByLimitIDParams{ctx, limitID}
	mmGetByLimitID.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetByLimitID.expectations {
		if minimock.Equal(e.params, mmGetByLimitID.defaultExpectation.params) {
			mmGetByLimitID.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByLimitID.defaultExpectation.params)
		}
	}

	return mmGetByLimitID
}

// ExpectCtxParam1 sets up expected param ctx for limitRepo.GetByLimitID
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) ExpectCtxParam1(ctx context.Context) *mLimitRepoMockGetByLimitID {
	if mmGetByLimitID.mock.funcGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Set")
	}

	if mmGetByLimitID.defaultExpectation == nil {
		mmGetByLimitID.defaultExpectation = &LimitRepoMockGetByLimitIDExpectation{}
	}

	if mmGetByLimitID.defaultExpectation.params != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Expect")
	}

	if mmGetByLimitID.defaultExpectation.paramPtrs == nil {
		mmGetByLimitID.defaultExpectation.paramPtrs = &LimitRepoMockGetByLimitIDParamPtrs{}
	}
	mmGetByLimitID.defaultExpectation.paramPtrs.ctx = &ctx
	mmGetByLimitID.defaultExpectation.expectationOrigins.originCtx = minimock.CallerInfo(1)

	return mmGetByLimitID
}

// ExpectLimitIDParam2 sets up expected param limitID for limitRepo.GetByLimitID
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) ExpectLimitIDParam2(limitID int32) *mLimitRepoMockGetByLimitID {
	if mmGetByLimitID.mock.funcGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Set")
	}

	if mmGetByLimitID.defaultExpectation == nil {
		mmGetByLimitID.defaultExpectation = &LimitRepoMockGetByLimitIDExpectation{}
	}

	if mmGetByLimitID.defaultExpectation.params != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Expect")
	}

	if mmGetByLimitID.defaultExpectation.paramPtrs == nil {
		mmGetByLimitID.defaultExpectation.paramPtrs = &LimitRepoMockGetByLimitIDParamPtrs{}
	}
	mmGetByLimitID.defaultExpectation.paramPtrs.limitID = &limitID
	mmGetByLimitID.defaultExpectation.expectationOrigins.originLimitID = minimock.CallerInfo(1)

	return mmGetByLimitID
}

// Inspect accepts an inspector function that has same arguments as the limitRepo.GetByLimitID
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Inspect(f func(ctx context.Context, limitID int32)) *mLimitRepoMockGetByLimitID {
	if mmGetByLimitID.mock.inspectFuncGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("Inspect function is already set for LimitRepoMock.GetByLimitID")
	}

	mmGetByLimitID.mock.inspectFuncGetByLimitID = f

	return mmGetByLimitID
}

// Return sets up results that will be returned by limitRepo.GetByLimitID
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Return(lp1 *model.Limit, err error) *LimitRepoMock {
	if mmGetByLimitID.mock.funcGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Set")
	}

	if mmGetByLimitID.defaultExpectation == nil {
		mmGetByLimitID.defaultExpectation = &LimitRepoMockGetByLimitIDExpectation{mock: mmGetByLimitID.mock}
	}
	mmGetByLimitID.defaultExpectation.results = &LimitRepoMockGetByLimitIDResults{lp1, err}
	mmGetByLimitID.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetByLimitID.mock
}

// Set uses given function f to mock the limitRepo.GetByLimitID method
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Set(f func(ctx context.Context, limitID int32) (lp1 *model.Limit, err error)) *LimitRepoMock {
	if mmGetByLimitID.defaultExpectation != nil {
		mmGetByLimitID.mock.t.Fatalf("Default expectation is already set for the limitRepo.GetByLimitID method")
	}

	if len(mmGetByLimitID.expectations) > 0 {
		mmGetByLimitID.mock.t.Fatalf("Some expectations are already set for the limitRepo.GetByLimitID method")
	}

	mmGetByLimitID.mock.funcGetByLimitID = f
	mmGetByLimitID.mock.funcGetByLimitIDOrigin = minimock.CallerInfo(1)
	return mmGetByLimitID.mock
}

// When sets expectation for the limitRepo.GetByLimitID which will trigger the result defined by the following
// Then helper
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) When(ctx context.Context, limitID int32) *LimitRepoMockGetByLimitIDExpectation {
	if mmGetByLimitID.mock.funcGetByLimitID != nil {
		mmGetByLimitID.mock.t.Fatalf("LimitRepoMock.GetByLimitID mock is already set by Set")
	}

	expectation := &LimitRepoMockGetByLimitIDExpectation{
		mock:               mmGetByLimitID.mock,
		params:             &LimitRepoMockGetByLimitIDParams{ctx, limitID},
		expectationOrigins: LimitRepoMockGetByLimitIDExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetByLimitID.expectations = append(mmGetByLimitID.expectations, expectation)
	return expectation
}

// Then sets up limitRepo.GetByLimitID return parameters for the expectation previously defined by the When method
func (e *LimitRepoMockGetByLimitIDExpectation) Then(lp1 *model.Limit, err error) *LimitRepoMock {
	e.results = &LimitRepoMockGetByLimitIDResults{lp1, err}
	return e.mock
}

// Times sets number of times limitRepo.GetByLimitID should be invoked
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Times(n uint64) *mLimitRepoMockGetByLimitID {
	if n == 0 {
		mmGetByLimitID.mock.t.Fatalf("Times of LimitRepoMock.GetByLimitID mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetByLimitID.expectedInvocations, n)
	mmGetByLimitID.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetByLimitID
}

func (mmGetByLimitID *mLimitRepoMockGetByLimitID) invocationsDone() bool {
	if len(mmGetByLimitID.expectations) == 0 && mmGetByLimitID.defaultExpectation == nil && mmGetByLimitID.mock.funcGetByLimitID == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetByLimitID.mock.afterGetByLimitIDCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetByLimitID.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetByLimitID implements limitRepo
func (mmGetByLimitID *LimitRepoMock) GetByLimitID(ctx context.Context, limitID int32) (lp1 *model.Limit, err error) {
	mm_atomic.AddUint64(&mmGetByLimitID.beforeGetByLimitIDCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByLimitID.afterGetByLimitIDCounter, 1)

	mmGetByLimitID.t.Helper()

	if mmGetByLimitID.inspectFuncGetByLimitID != nil {
		mmGetByLimitID.inspectFuncGetByLimitID(ctx, limitID)
	}

	mm_params := LimitRepoMockGetByLimitIDParams{ctx, limitID}

	// Record call args
	mmGetByLimitID.GetByLimitIDMock.mutex.Lock()
	mmGetByLimitID.GetByLimitIDMock.callArgs = append(mmGetByLimitID.GetByLimitIDMock.callArgs, &mm_params)
	mmGetByLimitID.GetByLimitIDMock.mutex.Unlock()

	for _, e := range mmGetByLimitID.GetByLimitIDMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.lp1, e.results.err
		}
	}

	if mmGetByLimitID.GetByLimitIDMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByLimitID.GetByLimitIDMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByLimitID.GetByLimitIDMock.defaultExpectation.params
		mm_want_ptrs := mmGetByLimitID.GetByLimitIDMock.defaultExpectation.paramPtrs

		mm_got := LimitRepoMockGetByLimitIDParams{ctx, limitID}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetByLimitID.t.Errorf("LimitRepoMock.GetByLimitID got unexpected parameter ctx, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByLimitID.GetByLimitIDMock.defaultExpectation.expectationOrigins.originCtx, *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.limitID != nil && !minimock.Equal(*mm_want_ptrs.limitID, mm_got.limitID) {
				mmGetByLimitID.t.Errorf("LimitRepoMock.GetByLimitID got unexpected parameter limitID, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetByLimitID.GetByLimitIDMock.defaultExpectation.expectationOrigins.originLimitID, *mm_want_ptrs.limitID, mm_got.limitID, minimock.Diff(*mm_want_ptrs.limitID, mm_got.limitID))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByLimitID.t.Errorf("LimitRepoMock.GetByLimitID got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetByLimitID.GetByLimitIDMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByLimitID.GetByLimitIDMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByLimitID.t.Fatal("No results are set for the LimitRepoMock.GetByLimitID")
		}
		return (*mm_results).lp1, (*mm_results).err
	}
	if mmGetByLimitID.funcGetByLimitID != nil {
		return mmGetByLimitID.funcGetByLimitID(ctx, limitID)
	}
	mmGetByLimitID.t.Fatalf("Unexpected call to LimitRepoMock.GetByLimitID. %v %v", ctx, limitID)
	return
}

// GetByLimitIDAfterCounter returns a count of finished LimitRepoMock.GetByLimitID invocations
func (mmGetByLimitID *LimitRepoMock) GetByLimitIDAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByLimitID.afterGetByLimitIDCounter)
}

// GetByLimitIDBeforeCounter returns a count of LimitRepoMock.GetByLimitID invocations
func (mmGetByLimitID *LimitRepoMock) GetByLimitIDBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByLimitID.beforeGetByLimitIDCounter)
}

// Calls returns a list of arguments used in each call to LimitRepoMock.GetByLimitID.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByLimitID *mLimitRepoMockGetByLimitID) Calls() []*LimitRepoMockGetByLimitIDParams {
	mmGetByLimitID.mutex.RLock()

	argCopy := make([]*LimitRepoMockGetByLimitIDParams, len(mmGetByLimitID.callArgs))
	copy(argCopy, mmGetByLimitID.callArgs)

	mmGetByLimitID.mutex.RUnlock()

	return argCopy
}

// MinimockGetByLimitIDDone returns true if the count of the GetByLimitID invocations corresponds
// the number of defined expectations
func (m *LimitRepoMock) MinimockGetByLimitIDDone() bool {
	if m.GetByLimitIDMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetByLimitIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetByLimitIDMock.invocationsDone()
}

// MinimockGetByLimitIDInspect logs each unmet expectation
func (m *LimitRepoMock) MinimockGetByLimitIDInspect() {
	for _, e := range m.GetByLimitIDMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LimitRepoMock.GetByLimitID at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetByLimitIDCounter := mm_atomic.LoadUint64(&m.afterGetByLimitIDCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetByLimitIDMock.defaultExpectation != nil && afterGetByLimitIDCounter < 1 {
		if m.GetByLimitIDMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LimitRepoMock.GetByLimitID at\n%s", m.GetByLimitIDMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LimitRepoMock.GetByLimitID at\n%s with params: %#v", m.GetByLimitIDMock.defaultExpectation.expectationOrigins.origin, *m.GetByLimitIDMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByLimitID != nil && afterGetByLimitIDCounter < 1 {
		m.t.Errorf("Expected call to LimitRepoMock.GetByLimitID at\n%s", m.funcGetByLimitIDOrigin)
	}

	if !m.GetByLimitIDMock.invocationsDone() && afterGetByLimitIDCounter > 0 {
		m.t.Errorf("Expected %d calls to LimitRepoMock.GetByLimitID at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetByLimitIDMock.expectedInvocations), m.GetByLimitIDMock.expectedInvocationsOrigin, afterGetByLimitIDCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LimitRepoMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()

			m.MinimockGetByLimitIDInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LimitRepoMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LimitRepoMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockGetByLimitIDDone()
}
