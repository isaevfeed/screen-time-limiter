// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package handlers

//go:generate minimock -i screen-time-limiter/internal/app/handlers.timer -o timer_mock_test.go -n TimerMock -p handlers

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// TimerMock implements timer
type TimerMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcNow          func() (t1 time.Time)
	funcNowOrigin    string
	inspectFuncNow   func()
	afterNowCounter  uint64
	beforeNowCounter uint64
	NowMock          mTimerMockNow
}

// NewTimerMock returns a mock for timer
func NewTimerMock(t minimock.Tester) *TimerMock {
	m := &TimerMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NowMock = mTimerMockNow{mock: m}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTimerMockNow struct {
	optional           bool
	mock               *TimerMock
	defaultExpectation *TimerMockNowExpectation
	expectations       []*TimerMockNowExpectation

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// TimerMockNowExpectation specifies expectation struct of the timer.Now
type TimerMockNowExpectation struct {
	mock *TimerMock

	results      *TimerMockNowResults
	returnOrigin string
	Counter      uint64
}

// TimerMockNowResults contains results of the timer.Now
type TimerMockNowResults struct {
	t1 time.Time
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmNow *mTimerMockNow) Optional() *mTimerMockNow {
	mmNow.optional = true
	return mmNow
}

// Expect sets up expected params for timer.Now
func (mmNow *mTimerMockNow) Expect() *mTimerMockNow {
	if mmNow.mock.funcNow != nil {
		mmNow.mock.t.Fatalf("TimerMock.Now mock is already set by Set")
	}

	if mmNow.defaultExpectation == nil {
		mmNow.defaultExpectation = &TimerMockNowExpectation{}
	}

	return mmNow
}

// Inspect accepts an inspector function that has same arguments as the timer.Now
func (mmNow *mTimerMockNow) Inspect(f func()) *mTimerMockNow {
	if mmNow.mock.inspectFuncNow != nil {
		mmNow.mock.t.Fatalf("Inspect function is already set for TimerMock.Now")
	}

	mmNow.mock.inspectFuncNow = f

	return mmNow
}

// Return sets up results that will be returned by timer.Now
func (mmNow *mTimerMockNow) Return(t1 time.Time) *TimerMock {
	if mmNow.mock.funcNow != nil {
		mmNow.mock.t.Fatalf("TimerMock.Now mock is already set by Set")
	}

	if mmNow.defaultExpectation == nil {
		mmNow.defaultExpectation = &TimerMockNowExpectation{mock: mmNow.mock}
	}
	mmNow.defaultExpectation.results = &TimerMockNowResults{t1}
	mmNow.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmNow.mock
}

// Set uses given function f to mock the timer.Now method
func (mmNow *mTimerMockNow) Set(f func() (t1 time.Time)) *TimerMock {
	if mmNow.defaultExpectation != nil {
		mmNow.mock.t.Fatalf("Default expectation is already set for the timer.Now method")
	}

	if len(mmNow.expectations) > 0 {
		mmNow.mock.t.Fatalf("Some expectations are already set for the timer.Now method")
	}

	mmNow.mock.funcNow = f
	mmNow.mock.funcNowOrigin = minimock.CallerInfo(1)
	return mmNow.mock
}

// Times sets number of times timer.Now should be invoked
func (mmNow *mTimerMockNow) Times(n uint64) *mTimerMockNow {
	if n == 0 {
		mmNow.mock.t.Fatalf("Times of TimerMock.Now mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmNow.expectedInvocations, n)
	mmNow.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmNow
}

func (mmNow *mTimerMockNow) invocationsDone() bool {
	if len(mmNow.expectations) == 0 && mmNow.defaultExpectation == nil && mmNow.mock.funcNow == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmNow.mock.afterNowCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmNow.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Now implements timer
func (mmNow *TimerMock) Now() (t1 time.Time) {
	mm_atomic.AddUint64(&mmNow.beforeNowCounter, 1)
	defer mm_atomic.AddUint64(&mmNow.afterNowCounter, 1)

	mmNow.t.Helper()

	if mmNow.inspectFuncNow != nil {
		mmNow.inspectFuncNow()
	}

	if mmNow.NowMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNow.NowMock.defaultExpectation.Counter, 1)

		mm_results := mmNow.NowMock.defaultExpectation.results
		if mm_results == nil {
			mmNow.t.Fatal("No results are set for the TimerMock.Now")
		}
		return (*mm_results).t1
	}
	if mmNow.funcNow != nil {
		return mmNow.funcNow()
	}
	mmNow.t.Fatalf("Unexpected call to TimerMock.Now.")
	return
}

// NowAfterCounter returns a count of finished TimerMock.Now invocations
func (mmNow *TimerMock) NowAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNow.afterNowCounter)
}

// NowBeforeCounter returns a count of TimerMock.Now invocations
func (mmNow *TimerMock) NowBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNow.beforeNowCounter)
}

// MinimockNowDone returns true if the count of the Now invocations corresponds
// the number of defined expectations
func (m *TimerMock) MinimockNowDone() bool {
	if m.NowMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.NowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.NowMock.invocationsDone()
}

// MinimockNowInspect logs each unmet expectation
func (m *TimerMock) MinimockNowInspect() {
	for _, e := range m.NowMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to TimerMock.Now")
		}
	}

	afterNowCounter := mm_atomic.LoadUint64(&m.afterNowCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.NowMock.defaultExpectation != nil && afterNowCounter < 1 {
		m.t.Errorf("Expected call to TimerMock.Now at\n%s", m.NowMock.defaultExpectation.returnOrigin)
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNow != nil && afterNowCounter < 1 {
		m.t.Errorf("Expected call to TimerMock.Now at\n%s", m.funcNowOrigin)
	}

	if !m.NowMock.invocationsDone() && afterNowCounter > 0 {
		m.t.Errorf("Expected %d calls to TimerMock.Now at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.NowMock.expectedInvocations), m.NowMock.expectedInvocationsOrigin, afterNowCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TimerMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockNowInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TimerMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TimerMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNowDone()
}
